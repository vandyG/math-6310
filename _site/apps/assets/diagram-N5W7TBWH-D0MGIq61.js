var $;import"./_Uint8Array-CPNtPV0k.js";import"./isSymbol-D1Vf4s0g.js";import"./_arrayMap-DQI2GUNb.js";import"./toString-pPvo2488.js";import"./toNumber-Bjr00yqN.js";import"./toInteger-Qi6pclEF.js";import"./isArrayLikeObject-CQy5-FN4.js";import"./_getTag-C4fv2peH.js";import"./_baseUniq-DuMeVp_r.js";import"./_baseIsEqual-Cdnsi4t8.js";import"./chunk-4KMFLZZN-D8J8fzqf.js";import"./_toKey-BvVjBIlz.js";import"./memoize-D2QB0zzX.js";import"./get-Bi1nZ6vb.js";import"./_baseFlatten-BM8p5vhd.js";import"./_basePickBy-CViVNfOD.js";import"./merge-DrdmtLTL.js";import"./_baseSlice-B27Cqkm6.js";import"./_arrayReduce-DDpPg0Qh.js";import"./clone-C-4MVcJh.js";import"./_baseEach-CWBhny_f.js";import"./hasIn-BZo8Xaqq.js";import"./_baseProperty-CIKnF2iY.js";import"./_createAggregator-DiCw154M.js";import"./min-DZ9NrTCT.js";import"./_baseMap-vZ8RB515.js";import"./isEmpty-D1b_MAwx.js";import"./_baseSet-B-t_O9-N.js";import"./preload-helper-CxnU7XTI.js";import"./main-Co0CqoDt.js";import{n as A}from"./ordinal-DO1z0TEs.js";import{t as T}from"./defaultLocale-BCtmQtCj.js";import"./timer-m_pEB4Lb.js";import{u as D}from"./src--EmJf_Ct.js";import"./math-BsaXoFIn.js";import"./step-aJ-oEw6-.js";import{i as _}from"./chunk-S3R3BYOJ-DO68jEIo.js";import"./init-BEfLCoUT.js";import{p as Z,t as tt}from"./treemap-CMOdyZ8L.js";import{n as m,r as V}from"./src-CWnjMQt8.js";import{B as et,C as at,U as lt,_ as rt,a as st,c as it,d as ot,v as nt,y as G,z as pt}from"./chunk-ABZYJK2D-DjRcbxmx.js";import{t as ct}from"./chunk-EXTU4WIE-97Zvkznr.js";import{i as C,n as dt}from"./chunk-QYVHNE3D-DA_jYaIp.js";import"./dist-D2dAPhhG.js";import"./chunk-JEIROHC2-Cp1tR_z8.js";import"./chunk-BN7GFLIU-DvomLhVN.js";import"./chunk-T44TD3VJ-Ww2OhwR5.js";import"./chunk-KMC2YHZD-Buiqyl2g.js";import"./chunk-WFWHJNB7-h5yM_3qQ.js";import"./chunk-WFRQ32O7-k2LaZwie.js";import"./chunk-XRWGC2XP-C9Mh6qts.js";import{t as mt}from"./chunk-4BX2VUAB-BesOWRPY.js";import{t as ht}from"./mermaid-parser.core-8414a7OP.js";import{t as ft}from"./chunk-QN33PNHL-dhs223oU.js";var O=($=class{constructor(){this.nodes=[],this.levels=new Map,this.outerNodes=[],this.classes=new Map,this.setAccTitle=et,this.getAccTitle=nt,this.setDiagramTitle=lt,this.getDiagramTitle=at,this.getAccDescription=rt,this.setAccDescription=pt}getNodes(){return this.nodes}getConfig(){let a=ot,i=G();return _({...a.treemap,...i.treemap??{}})}addNode(a,i){this.nodes.push(a),this.levels.set(a,i),i===0&&(this.outerNodes.push(a),this.root??(this.root=a))}getRoot(){return{name:"",children:this.outerNodes}}addClass(a,i){let r=this.classes.get(a)??{id:a,styles:[],textStyles:[]},p=i.replace(/\\,/g,"\xA7\xA7\xA7").replace(/,/g,";").replace(/§§§/g,",").split(";");p&&p.forEach(s=>{dt(s)&&(r!=null&&r.textStyles?r.textStyles.push(s):r.textStyles=[s]),r!=null&&r.styles?r.styles.push(s):r.styles=[s]}),this.classes.set(a,r)}getClasses(){return this.classes}getStylesForClass(a){var i;return((i=this.classes.get(a))==null?void 0:i.styles)??[]}clear(){st(),this.nodes=[],this.levels=new Map,this.outerNodes=[],this.classes=new Map,this.root=void 0}},m($,"TreeMapDB"),$);function U(c){if(!c.length)return[];let a=[],i=[];return c.forEach(r=>{let p={name:r.name,children:r.type==="Leaf"?void 0:[]};for(p.classSelector=r==null?void 0:r.classSelector,r!=null&&r.cssCompiledStyles&&(p.cssCompiledStyles=[r.cssCompiledStyles]),r.type==="Leaf"&&r.value!==void 0&&(p.value=r.value);i.length>0&&i[i.length-1].level>=r.level;)i.pop();if(i.length===0)a.push(p);else{let s=i[i.length-1].node;s.children?s.children.push(p):s.children=[p]}r.type!=="Leaf"&&i.push({node:p,level:r.level})}),a}m(U,"buildHierarchy");var yt=m((c,a)=>{mt(c,a);let i=[];for(let s of c.TreemapRows??[])s.$type==="ClassDefStatement"&&a.addClass(s.className??"",s.styleText??"");for(let s of c.TreemapRows??[]){let d=s.item;if(!d)continue;let f=s.indent?parseInt(s.indent):0,z=ut(d),l=d.classSelector?a.getStylesForClass(d.classSelector):[],w=l.length>0?l.join(";"):void 0,g={level:f,name:z,type:d.$type,value:d.value,classSelector:d.classSelector,cssCompiledStyles:w};i.push(g)}let r=U(i),p=m((s,d)=>{for(let f of s)a.addNode(f,d),f.children&&f.children.length>0&&p(f.children,d+1)},"addNodesRecursively");p(r,0)},"populate"),ut=m(c=>c.name?String(c.name):"","getItemName"),q={parser:{yy:void 0},parse:m(async c=>{var a;try{let i=await ht("treemap",c);V.debug("Treemap AST:",i);let r=(a=q.parser)==null?void 0:a.yy;if(!(r instanceof O))throw Error("parser.parser?.yy was not a TreemapDB. This is due to a bug within Mermaid, please report this issue at https://github.com/mermaid-js/mermaid/issues.");yt(i,r)}catch(i){throw V.error("Error parsing treemap:",i),i}},"parse")},St=10,v=10,M=25,gt={draw:m((c,a,i,r)=>{let p=r.db,s=p.getConfig(),d=s.padding??St,f=p.getDiagramTitle(),z=p.getRoot(),{themeVariables:l}=G();if(!z)return;let w=f?30:0,g=ct(a),E=s.nodeWidth?s.nodeWidth*v:960,R=s.nodeHeight?s.nodeHeight*v:500,W=E,B=R+w;g.attr("viewBox",`0 0 ${W} ${B}`),it(g,B,W,s.useMaxWidth);let x;try{let t=s.valueFormat||",";if(t==="$0,0")x=m(e=>"$"+T(",")(e),"valueFormat");else if(t.startsWith("$")&&t.includes(",")){let e=/\.\d+/.exec(t),n=e?e[0]:"";x=m(y=>"$"+T(","+n)(y),"valueFormat")}else if(t.startsWith("$")){let e=t.substring(1);x=m(n=>"$"+T(e||"")(n),"valueFormat")}else x=T(t)}catch(t){V.error("Error creating format function:",t),x=T(",")}let L=A().range(["transparent",l.cScale0,l.cScale1,l.cScale2,l.cScale3,l.cScale4,l.cScale5,l.cScale6,l.cScale7,l.cScale8,l.cScale9,l.cScale10,l.cScale11]),J=A().range(["transparent",l.cScalePeer0,l.cScalePeer1,l.cScalePeer2,l.cScalePeer3,l.cScalePeer4,l.cScalePeer5,l.cScalePeer6,l.cScalePeer7,l.cScalePeer8,l.cScalePeer9,l.cScalePeer10,l.cScalePeer11]),F=A().range([l.cScaleLabel0,l.cScaleLabel1,l.cScaleLabel2,l.cScaleLabel3,l.cScaleLabel4,l.cScaleLabel5,l.cScaleLabel6,l.cScaleLabel7,l.cScaleLabel8,l.cScaleLabel9,l.cScaleLabel10,l.cScaleLabel11]);f&&g.append("text").attr("x",W/2).attr("y",w/2).attr("class","treemapTitle").attr("text-anchor","middle").attr("dominant-baseline","middle").text(f);let H=g.append("g").attr("transform",`translate(0, ${w})`).attr("class","treemapContainer"),K=Z(z).sum(t=>t.value??0).sort((t,e)=>(e.value??0)-(t.value??0)),I=tt().size([E,R]).paddingTop(t=>t.children&&t.children.length>0?M+v:0).paddingInner(d).paddingLeft(t=>t.children&&t.children.length>0?v:0).paddingRight(t=>t.children&&t.children.length>0?v:0).paddingBottom(t=>t.children&&t.children.length>0?v:0).round(!0)(K),Q=I.descendants().filter(t=>t.children&&t.children.length>0),k=H.selectAll(".treemapSection").data(Q).enter().append("g").attr("class","treemapSection").attr("transform",t=>`translate(${t.x0},${t.y0})`);k.append("rect").attr("width",t=>t.x1-t.x0).attr("height",M).attr("class","treemapSectionHeader").attr("fill","none").attr("fill-opacity",.6).attr("stroke-width",.6).attr("style",t=>t.depth===0?"display: none;":""),k.append("clipPath").attr("id",(t,e)=>`clip-section-${a}-${e}`).append("rect").attr("width",t=>Math.max(0,t.x1-t.x0-12)).attr("height",M),k.append("rect").attr("width",t=>t.x1-t.x0).attr("height",t=>t.y1-t.y0).attr("class",(t,e)=>`treemapSection section${e}`).attr("fill",t=>L(t.data.name)).attr("fill-opacity",.6).attr("stroke",t=>J(t.data.name)).attr("stroke-width",2).attr("stroke-opacity",.4).attr("style",t=>{if(t.depth===0)return"display: none;";let e=C({cssCompiledStyles:t.data.cssCompiledStyles});return e.nodeStyles+";"+e.borderStyles.join(";")}),k.append("text").attr("class","treemapSectionLabel").attr("x",6).attr("y",M/2).attr("dominant-baseline","middle").text(t=>t.depth===0?"":t.data.name).attr("font-weight","bold").attr("style",t=>{if(t.depth===0)return"display: none;";let e="dominant-baseline: middle; font-size: 12px; fill:"+F(t.data.name)+"; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;",n=C({cssCompiledStyles:t.data.cssCompiledStyles});return e+n.labelStyles.replace("color:","fill:")}).each(function(t){if(t.depth===0)return;let e=D(this),n=t.data.name;e.text(n);let y=t.x1-t.x0,S;S=s.showValues!==!1&&t.value?y-10-30-10-6:y-6-6;let h=Math.max(15,S),u=e.node();if(u.getComputedTextLength()>h){let o=n;for(;o.length>0;){if(o=n.substring(0,o.length-1),o.length===0){e.text("..."),u.getComputedTextLength()>h&&e.text("");break}if(e.text(o+"..."),u.getComputedTextLength()<=h)break}}}),s.showValues!==!1&&k.append("text").attr("class","treemapSectionValue").attr("x",t=>t.x1-t.x0-10).attr("y",M/2).attr("text-anchor","end").attr("dominant-baseline","middle").text(t=>t.value?x(t.value):"").attr("font-style","italic").attr("style",t=>{if(t.depth===0)return"display: none;";let e="text-anchor: end; dominant-baseline: middle; font-size: 10px; fill:"+F(t.data.name)+"; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;",n=C({cssCompiledStyles:t.data.cssCompiledStyles});return e+n.labelStyles.replace("color:","fill:")});let X=I.leaves(),P=H.selectAll(".treemapLeafGroup").data(X).enter().append("g").attr("class",(t,e)=>`treemapNode treemapLeafGroup leaf${e}${t.data.classSelector?` ${t.data.classSelector}`:""}x`).attr("transform",t=>`translate(${t.x0},${t.y0})`);P.append("rect").attr("width",t=>t.x1-t.x0).attr("height",t=>t.y1-t.y0).attr("class","treemapLeaf").attr("fill",t=>t.parent?L(t.parent.data.name):L(t.data.name)).attr("style",t=>C({cssCompiledStyles:t.data.cssCompiledStyles}).nodeStyles).attr("fill-opacity",.3).attr("stroke",t=>t.parent?L(t.parent.data.name):L(t.data.name)).attr("stroke-width",3),P.append("clipPath").attr("id",(t,e)=>`clip-${a}-${e}`).append("rect").attr("width",t=>Math.max(0,t.x1-t.x0-4)).attr("height",t=>Math.max(0,t.y1-t.y0-4)),P.append("text").attr("class","treemapLabel").attr("x",t=>(t.x1-t.x0)/2).attr("y",t=>(t.y1-t.y0)/2).attr("style",t=>{let e="text-anchor: middle; dominant-baseline: middle; font-size: 38px;fill:"+F(t.data.name)+";",n=C({cssCompiledStyles:t.data.cssCompiledStyles});return e+n.labelStyles.replace("color:","fill:")}).attr("clip-path",(t,e)=>`url(#clip-${a}-${e})`).text(t=>t.data.name).each(function(t){let e=D(this),n=t.x1-t.x0,y=t.y1-t.y0,S=e.node(),h=n-8,u=y-8;if(h<10||u<10){e.style("display","none");return}let o=parseInt(e.style("font-size"),10),N=.6;for(;S.getComputedTextLength()>h&&o>8;)o--,e.style("font-size",`${o}px`);let b=Math.max(6,Math.min(28,Math.round(o*N))),j=o+2+b;for(;j>u&&o>8&&(o--,b=Math.max(6,Math.min(28,Math.round(o*N))),!(b<6&&o===8));)e.style("font-size",`${o}px`),j=o+2+b;e.style("font-size",`${o}px`),(S.getComputedTextLength()>h||o<8||u<o)&&e.style("display","none")}),s.showValues!==!1&&P.append("text").attr("class","treemapValue").attr("x",t=>(t.x1-t.x0)/2).attr("y",function(t){return(t.y1-t.y0)/2}).attr("style",t=>{let e="text-anchor: middle; dominant-baseline: hanging; font-size: 28px;fill:"+F(t.data.name)+";",n=C({cssCompiledStyles:t.data.cssCompiledStyles});return e+n.labelStyles.replace("color:","fill:")}).attr("clip-path",(t,e)=>`url(#clip-${a}-${e})`).text(t=>t.value?x(t.value):"").each(function(t){let e=D(this),n=this.parentNode;if(!n){e.style("display","none");return}let y=D(n).select(".treemapLabel");if(y.empty()||y.style("display")==="none"){e.style("display","none");return}let S=parseFloat(y.style("font-size")),h=Math.max(6,Math.min(28,Math.round(S*.6)));e.style("font-size",`${h}px`);let u=(t.y1-t.y0)/2+S/2+2;e.attr("y",u);let o=t.x1-t.x0,N=t.y1-t.y0-4,b=o-8;e.node().getComputedTextLength()>b||u+h>N||h<6?e.style("display","none"):e.style("display",null)});let Y=s.diagramPadding??8;ft(g,Y,"flowchart",(s==null?void 0:s.useMaxWidth)||!1)},"draw"),getClasses:m(function(c,a){return a.db.getClasses()},"getClasses")},xt={sectionStrokeColor:"black",sectionStrokeWidth:"1",sectionFillColor:"#efefef",leafStrokeColor:"black",leafStrokeWidth:"1",leafFillColor:"#efefef",labelColor:"black",labelFontSize:"12px",valueFontSize:"10px",valueColor:"black",titleColor:"black",titleFontSize:"14px"},bt={parser:q,get db(){return new O},renderer:gt,styles:m(({treemap:c}={})=>{let a=_(xt,c);return`
  .treemapNode.section {
    stroke: ${a.sectionStrokeColor};
    stroke-width: ${a.sectionStrokeWidth};
    fill: ${a.sectionFillColor};
  }
  .treemapNode.leaf {
    stroke: ${a.leafStrokeColor};
    stroke-width: ${a.leafStrokeWidth};
    fill: ${a.leafFillColor};
  }
  .treemapLabel {
    fill: ${a.labelColor};
    font-size: ${a.labelFontSize};
  }
  .treemapValue {
    fill: ${a.valueColor};
    font-size: ${a.valueFontSize};
  }
  .treemapTitle {
    fill: ${a.titleColor};
    font-size: ${a.titleFontSize};
  }
  `},"getStyles")};export{bt as diagram};
